// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TalkRPCClient is the client API for TalkRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkRPCClient interface {
	DoSomeWork(ctx context.Context, in *RequestResponse, opts ...grpc.CallOption) (*RequestResponse, error)
	DoSomeWorkStream(ctx context.Context, opts ...grpc.CallOption) (TalkRPC_DoSomeWorkStreamClient, error)
}

type talkRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkRPCClient(cc grpc.ClientConnInterface) TalkRPCClient {
	return &talkRPCClient{cc}
}

func (c *talkRPCClient) DoSomeWork(ctx context.Context, in *RequestResponse, opts ...grpc.CallOption) (*RequestResponse, error) {
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, "/TalkRPC/DoSomeWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkRPCClient) DoSomeWorkStream(ctx context.Context, opts ...grpc.CallOption) (TalkRPC_DoSomeWorkStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TalkRPC_ServiceDesc.Streams[0], "/TalkRPC/DoSomeWorkStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &talkRPCDoSomeWorkStreamClient{stream}
	return x, nil
}

type TalkRPC_DoSomeWorkStreamClient interface {
	Send(*RequestResponse) error
	Recv() (*RequestResponse, error)
	grpc.ClientStream
}

type talkRPCDoSomeWorkStreamClient struct {
	grpc.ClientStream
}

func (x *talkRPCDoSomeWorkStreamClient) Send(m *RequestResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *talkRPCDoSomeWorkStreamClient) Recv() (*RequestResponse, error) {
	m := new(RequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TalkRPCServer is the server API for TalkRPC service.
// All implementations must embed UnimplementedTalkRPCServer
// for forward compatibility
type TalkRPCServer interface {
	DoSomeWork(context.Context, *RequestResponse) (*RequestResponse, error)
	DoSomeWorkStream(TalkRPC_DoSomeWorkStreamServer) error
	mustEmbedUnimplementedTalkRPCServer()
}

// UnimplementedTalkRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTalkRPCServer struct {
}

func (UnimplementedTalkRPCServer) DoSomeWork(context.Context, *RequestResponse) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSomeWork not implemented")
}
func (UnimplementedTalkRPCServer) DoSomeWorkStream(TalkRPC_DoSomeWorkStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoSomeWorkStream not implemented")
}
func (UnimplementedTalkRPCServer) mustEmbedUnimplementedTalkRPCServer() {}

// UnsafeTalkRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalkRPCServer will
// result in compilation errors.
type UnsafeTalkRPCServer interface {
	mustEmbedUnimplementedTalkRPCServer()
}

func RegisterTalkRPCServer(s grpc.ServiceRegistrar, srv TalkRPCServer) {
	s.RegisterService(&TalkRPC_ServiceDesc, srv)
}

func _TalkRPC_DoSomeWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkRPCServer).DoSomeWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TalkRPC/DoSomeWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkRPCServer).DoSomeWork(ctx, req.(*RequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkRPC_DoSomeWorkStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TalkRPCServer).DoSomeWorkStream(&talkRPCDoSomeWorkStreamServer{stream})
}

type TalkRPC_DoSomeWorkStreamServer interface {
	Send(*RequestResponse) error
	Recv() (*RequestResponse, error)
	grpc.ServerStream
}

type talkRPCDoSomeWorkStreamServer struct {
	grpc.ServerStream
}

func (x *talkRPCDoSomeWorkStreamServer) Send(m *RequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *talkRPCDoSomeWorkStreamServer) Recv() (*RequestResponse, error) {
	m := new(RequestResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TalkRPC_ServiceDesc is the grpc.ServiceDesc for TalkRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TalkRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TalkRPC",
	HandlerType: (*TalkRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoSomeWork",
			Handler:    _TalkRPC_DoSomeWork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoSomeWorkStream",
			Handler:       _TalkRPC_DoSomeWorkStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
